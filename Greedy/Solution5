import java.util.ArrayList;
import java.util.Collections;

// 탐욕법 - 섬 연결하기
// 섬의 개수는 최대 100개 이기 때문에 2차원 배열로 가능
// 하지만 최소비용 계산을 하기 때문에 크러스칼 알고리즘이 더 효율적
// 1. 가중치를 오름차순 정렬
// 2. 정렬된 간선 리스트에서 순서대로 사이클을 형성하지 않는 간선을 선택
//    즉, 가장 낮은 가중치를 선택
//    사이클을 형성하는 간선 제외
// 3. 해당 간선을 현재의 MST(최소비용 신장트리)의 집합에 추가
// 시간복잡도  O(elog₂e)
// 프림 알고리즘 O(n^2)
// 그래프 내에 적은 숫자의 간선을 가지는 희소 그래프의 경우 크러스칼이 적합
// 그래프에 간선이 많이 존재하는 밀집 그래프의 경우 프림이 적합
class Solution34 {
	int[] island;
	
	class Node implements Comparable<Node>{
		int from;
		int to;
		int cost;
		
		Node(int from, int to, int cost) {
			this.from = from;
			this.to = to;
			this.cost = cost;
		}
		
		public int compareTo(Node n) {
			return this.cost < n.cost ? -1 : 1;
		}
	}
	
	public int find(int parent) {
		if(island[parent] == parent) {
			return parent;
		} else {
			return island[parent] = find(island[parent]);
		}
	}
	
	public int solution(int n, int[][] costs) {
        int answer = 0;
        island = new int[n];
        ArrayList<Node> nd = new ArrayList();
        
        for(int i=0;i<costs.length;i++) {
        	nd.add(new Node(costs[i][0], costs[i][1], costs[i][2]));
        }
        
        Collections.sort(nd);
        
        //초기화(부모는 자기자신)
        for(int i=0;i<island.length;i++) {
        	island[i] = i;
        }
        
        for(Node t : nd) {
        	int first  = find(t.from);
        	int second = find(t.to);
        	
        	if(first == second) 
        		continue;
        	
        	island[second] = first; 
        	answer+=t.cost;
        }
        
        return answer;
    }
	
	public static void main(String[] args) {
		int n=4;
		int[][] costs = {
				{0,1,1},
				{0,2,2},
				{1,2,5},
				{1,3,1},
				{2,3,8}	
		};
		
		Solution34 s = new Solution34();
		System.out.println(s.solution(n, costs));
	}
}


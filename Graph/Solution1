import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

// 그래프 - 가장 먼 노드
// 1번 노드에서 가장 멀리 떨어진 노드의 개수
// BFS로 접근? 아니면 2차원 배열?
// 그래프는 인접행렬, 인접리스트(무방향, 방향, 가중치 그래프)

class Solution28 {
	class Node {
		int vertex;
		int depth;
		
		Node(int vertex, int depth) {
			this.vertex = vertex;
			this.depth = depth;
		}
	}
	
	public int solution(int n, int[][] edge) {
        int answer = 0;
        int[] visit = new int[n+1];
        
        ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();
        Queue<Node> q = new LinkedList();
        
        for(int i=0;i<n+1;i++) {
        	arr.add(new ArrayList<Integer>());
        }
        
        for(int i=0;i<edge.length;i++) {
        	arr.get(edge[i][0]).add(edge[i][1]);
        	arr.get(edge[i][1]).add(edge[i][0]);
        }
        int max = 0;
        q.offer(new Node(1,1));
        visit[1] = 1;
        
        while(!q.isEmpty()) {
        	Node nd = q.poll();
            
            int tmp = 0;
            //System.out.println(nd.vertex +","+nd.depth);
            
        	for(int i=0;i<arr.get(nd.vertex).size();i++) {
        		int v = arr.get(nd.vertex).get(i);
        		
        		if(visit[v] > 0)
        			continue;
        		q.offer(new Node(v, nd.depth+1));
        		visit[v] = nd.depth+1;
        		tmp = nd.depth+1;
        	}
        	max = Math.max(max, tmp);
        }
        
        for(int i : visit) {
        	if(max == i)
        		answer++;
        }
        return answer;
    }


	public static void main(String[] args) {
		int n=6;
		int[][] edge = {
				{3, 6}, {4, 3}, {3, 2}, {1, 3}, {1, 2}, {2, 4}, {5, 2}	
		};
		
		Solution28 s = new Solution28();
		System.out.println(s.solution(n, edge));
	}
}

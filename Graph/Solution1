import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

// 그래프 - 가장 먼 노드
// 1번 노드에서 가장 멀리 떨어진 노드의 개수
// BFS로 접근? 아니면 2차원 배열?
// 그래프는 인접행렬, 인접리스트(무방향, 방향, 가중치 그래프)

class Solution28 {
	class Node {
		int vertex;
		int depth;
		
		Node(int vertex, int depth) {
			this.vertex = vertex;
			this.depth = depth;
		}
	}
	
	public int solution(int n, int[][] edge) {
        int answer = 0;
        int[] visit = new int[n+1];
        
        ArrayList<ArrayList<Node>> arr = new ArrayList<ArrayList<Node>>();
        Queue<Integer> q = new LinkedList();
        
        for(int i=0;i<n+1;i++) {
        	arr.add(new ArrayList<Node>());
        }
        
        for(int i=0;i<edge.length;i++) {
        	arr.get(edge[i][0]).add(new Node(edge[i][1],1));
        	arr.get(edge[i][1]).add(new Node(edge[i][0],1));
        }
        
        q.offer(1);
        visit[1] = 1;
        
        while(!q.isEmpty()) {
        	int tmp = q.poll();
        	
        	for(int i=tmp;i<arr.get(i).size();i++) {
        		
        	}
        }
        
        
        
        /*for(int i=0;i<n+1;i++) {
        	for(int j=0;j<arr.get(i).size();j++) {
        		System.out.println(arr.get(i).get(j).vertex);
        	}
        	System.out.println();
        }*/
        
        System.out.println();
        return answer;
    }


	public static void main(String[] args) {
		int n=6;
		int[][] edge = {
				{3, 6}, {4, 3}, {3, 2}, {1, 3}, {1, 2}, {2, 4}, {5, 2}	
		};
		
		Solution28 s = new Solution28();
		System.out.println(s.solution(n, edge));
	}
}




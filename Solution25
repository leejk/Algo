import java.util.Arrays;
import java.util.PriorityQueue;

//깊이/너비 우선 탐색(DFS/BFS) - 여행경로
//DFS로 해결 필요
class Solution25 {
	
	static int[] visit;
	
	class Route {
		String name;
		int nb;
		
		Route(String name, int nb) {
			this.name = name;
			this.nb = nb;
		}
		
	}
	
	public String[] solution(String[][] tickets) {
        String[] answer = {};
        visit = new int[tickets.length];
        int cnt = 0;
        
       DFS("ICN", tickets, -1);  
        
       
        
        return answer;
    }
	
	public void DFS(String from, String[][] tickets, int depth) {
		
		for(int i=0;i<tickets.length;i++) {
			if(from.equals(tickets[i][0])) {
				if(visit[i] == 1)
					continue;
				
				visit[i] = 1;
				DFS(tickets[i][0], tickets, depth+1);
				visit[i] = 0;
			}
		}
		
	}

	public static void main(String[] args) {
		String[][] tickets = { 
				//{"ICN", "JFK"}, {"HND", "IAD"}, {"JFK", "HND"}
				//{"ICN", "SFO"}, {"ICN", "ATL"}, {"SFO", "ATL"}, {"ATL", "ICN"}, {"ATL","SFO"}
				{"ICN", "A"}, {"ICN", "B"}, {"B", "ICN"} //ICN, B, ICN, A
				//{"ICN", "A"}, {"ICN", "A"}, {"A", "ICN"}, {"A", "C"} //ICN ,A, ICN, A, C
		};

		Solution25 s = new Solution25();
		System.out.println(s.solution(tickets));
	}
}

package P210207;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

//깊이/너비 우선 탐색(DFS/BFS) - 여행경로
//DFS로 해결 필요
class Solution25 {

	static int[] visit;
	static ArrayList<String> arr;

	public String[] solution(String[][] tickets) {
        String[] answer = {};
        arr = new ArrayList<String>();
        visit = new int[tickets.length];

        DFS("ICN", tickets, 0, "ICN");
        
        Collections.sort(arr);
        answer = arr.get(0).split(",");
        //System.out.println(Arrays.toString(answer));
        return answer;
    }

	public void DFS(String from, String[][] tickets, int depth, String route) {

		if(depth >= tickets.length) {
			arr.add(route);
			return;
		}
		
		for(int i=0;i<tickets.length;i++) {
			if(from.equals(tickets[i][0])) {
				if(visit[i] != 0)
					continue;

				visit[i] = depth+1;
				DFS(tickets[i][1], tickets, depth+1, route +"," + tickets[i][1]);
				visit[i] = 0;
			}
		}

	}

	public static void main(String[] args) {
		String[][] tickets = { 
				//{"ICN", "JFK"}, {"HND", "IAD"}, {"JFK", "HND"}
				//{"ICN", "SFO"}, {"ICN", "ATL"}, {"SFO", "ATL"}, {"ATL", "ICN"}, {"ATL","SFO"}
				//{"ICN", "A"}, {"ICN", "B"}, {"B", "ICN"} //ICN, B, ICN, A
				{"ICN", "A"}, {"ICN", "A"}, {"A", "ICN"}, {"A", "C"} //ICN ,A, ICN, A, C
		};

		Solution25 s = new Solution25();
		System.out.println(s.solution(tickets));
	}
}
